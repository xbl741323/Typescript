一、Typescript介绍
1、Typescript是由微软开发的一款开源的编程语言
2、Typescript是Javascript的超级。遵循最新的ES6、ES5规范。Typescript扩展了Javascript的
语法。
3、Typescript更像后端java、c#这样的面向对象语言，所以可以让js开发大型企业项目。
4、谷歌也在大力支持Typescript的推广，谷歌的angular2.x就是基于Typescript语法。
5、最新的Vue、React也可以集成Typescript。

二、Typescript 安装 编译
安装：npm i typescript -g

编译：tsc index.ts  ->会生成 index.js文件（这样每次都要手动编译一下，很麻烦）

三、Typescript 开发工具 Vscode 配置自动编译.ts文件（为了解决手动编译的问题）
1、创建 tsconfig.json 文件 tsc --init 生成配置文件  然后在tsconfig.json 文件中将 // "outDir": "./",    改成    "outDir": "./js",   

2、点击菜单 终端-运行任务 点击tsc:监视-tsconfig.json 然后就可以自动生成代码了

四、Typescript中的数据类型
Typescript中为了是编写的代码更规范，更有利于维护，增加了类型验证，在Typescript中主要给我们提供了以下数据类型
      布尔类型（boolean）
      数字类型（number）
      字符串类型（string）
      null 和 undefined
      数组类型（array）

      元组类型（tuple）   
      枚举类型（enum）
      任意类型（any）
      void类型
      never类型

1. 布尔类型（boolean）
Es5中的写法（正确写法） ts中（错误写法）
       var flag = true;
       flag = 456;

Typescript中为了使编写的代码更规范，更有利于维护，增加了类型校验
写ts代码必须指定类型
       var flag:boolean = true;
       flag = 123 //错误写法
       flag = flase //正确写法
       console.log(flag)

2.数字类型（number）
       var num:number = 123;
       num = 456; //正确写法
       console.log(num)
       num = "str";//错误写法

3.字符串类型（string）
       var str:string = "this is ts"
       str='haha' //正确写法
       console.log(str)
       str=true;//错误写法

4.数组类型（array）ts中定义数组有两种方式
   //var arr = [1,2,3,4,5]
   1.第一种定义数组方式
   var arr:number[] = [1,2,3,4,5]
   console.log(arr)

   2.第二种定义数组的方式
   var arr:Array<number>=[1,2,3,4,5] 
   console.log(arr)

   3.第三种定义数组的方式
    var arr:any=[1,'xs',3,4,5] 
    console.log(arr)

5.元组类型（tuple） 属于数组的一种
   let arr:[number,string] = [123,'this is ts']
   console.log(arr)

6.枚举类型（enum）
随着计算机的不断普及，程序不仅用于数值计算，还更广泛的用于处理非数值的数据。
例如：性别、月份、星期几、颜色、单位名、学历、职业等，都不是数值类型。
在其它程序设计语言中，一般用一个数值来代表某一状态，这种处理方法不直观，易读性差。
如果能在程序中用自然语言中相应含义的单词来代表某一状态，则程序就很容易阅读和理解。
也就是说，事先考虑到某一变量可能取的值，尽量用自然语言中含义清楚的单词来表它的每
一个值，这种方法称为枚举方法，用这种方法定义的类型称为枚举类型。
     enum 枚举名{
          标识符[=整形常数]，
          标识符[=整形常数]，
          标识符[=整形常数]，
          ...
          标识符[=整形常数]，
     };
     enum Flag {success=1,error=2};
     let s:Flag = Flag.success;
     console.log(s);

     enum Color {blue,red,'orange'}
     let c:Color = Color.red
     console.log(c);          // 如果标识符没有赋值，它的值就是下标

7.任意类型（any）
     var num:any = 123;
     num='str'
     console.log(num)

8.null 和 undefined 其它（never类型）数据类型的子类型
     var result:number | undefined;
     result = 123;
     console.log(result)

     var result1:null | undefined;
     console.log(result1)

     var result3:null;
     result3 = null
     console.log(result3)

     var result4:number|null|undefined;
     result4 = 123
     console.log(result4)

9.void类型：typescript中的void表示没有任何类型，一般用于定义方法的时候没有返回值
     //Es5的定义方法
     function run(){
       console.log('run')
    }

     //Typescript中的用法
     function run():void{
        console.log('run')
     }
run;

10.never类型：是其他类型（包括 null 和 undefined）的子类型，代表从不会出现的值，这意味着声明never的变量只能被
never类型所赋值。

五、Typescript 函数
1.函数的定义：
  //Es5中=>函数声明法
  function run(){
    return 'run'
}

  //Es5中=>函数表达式法（匿名函数法）
   var run2 = function(){
     return 'run2'
}

  //Typescript中=>函数声明法
  function  run():string{
     return '字符串';
}

  //Typescript中=>函数表达式法（匿名函数法）
  var fun = function():number{
     return 456;
}

//Ts中定义方法传参
function getInfo(name:string,age:number):string{
    return `我叫${name}，今年${age}岁了`//这里用到了模板自变量表示法
}

console.log(getInfo('zs',18))

//没有返回值的方法
function getInfo2(name:string,age:number):void{
    console.log(name+age)
}
getInfo2('ls',20)

//方法可选参数
//Es5里面方法的实参和形参可以不一样，如果不一样就需要配置可选参数

function getPersonalInfo(name: string, age?: number): string {
    if (age) {
        return `${name}---${age}`
    } else {
        return `${name}---年龄不告诉你`
    }
}

console.log(getPersonalInfo('ww'))

//注意：可选参数必须配置到参数的最后面
/*
function getPersonalInfo(name？: string, age: number): string {
    if (age) {
        return `${name}---${age}`
    } else {
        return `${name}---年龄不告诉你`
    }
}
console.log(getPersonalInfo('ww'))
以上这种写法是错误的
*/

//默认参数（默认参数也可以叫做可选参数）
function getPersonalInfo2(name: string, age: number = 20): string {
    if (age) {
        return `${name}---${age}`
    } else {
        return `${name}---年龄不告诉你`
    }
}
console.log(getPersonalInfo2('lyy',30))//调用方法时传入默认参数的值会覆盖原来默认参数的值

//三点运算符（用于解决形参个数太多不好表示的问题）
function add(...result: number[]): number {
    var sum = 0;
    result.forEach(item => {
        sum += item
    })
    return sum;
}
console.log(add(1, 2, 3, 4, 5))

function add2(num:number,...result: number[]): number {//这样也行
    var sum = num;
    result.forEach(item => {
        sum += item
    })
    return sum;
}
console.log(add(1, 2, 3, 4, 5))

//Ts函数重载
// java中方法的重载，重载指的是方法的名字一样，但是形参的类型，个数，排列顺序不同，这是
//会出现重载的情况

// Typescript中的重载，通过为同一个同名函数提供多个函数类型来实现多种功能的目的

// Ts为了兼容Es5  以及 Es6 重载的写法和java中有区别

//Es5中出现同名函数，后面的函数会直接覆盖前面的函数
/*
function test(num){

}

function test(num,num2){

}
*/

//Ts中函数的重载写法如下所示
function postInfo(name: string): string;

function postInfo(age: number): number;

function postInfo(arr: any): any {
    if (typeof (arr) == 'string') {
        return `我的名字是${arr}`
    } else {
        return `我的年龄是${arr}`
    }
}
console.log(postInfo('zs'))
console.log(postInfo(13))

//Ts中函数的重载写法如下所示（参数不一样时）
function patchInfo(name: string): string;

function patchInfo(name: string, age: number): string;

function patchInfo(name: any, age?: any): any {
    if (age) {
        return `我的姓名是${name},年龄是${age}`
    } else {
        return `我的姓名是${name}`
    }
}

console.log(patchInfo('lyy'))
console.log(patchInfo('ddt',21))

//Ts中的箭头函数（同Es6中的用法一样）箭头函数中的this指向上下文
//未使用箭头函数
setTimeout(function () {
    console.log("---")
}, 3000)

//使用箭头函数
setTimeout(() => {
    console.log("===")
}, 3000)

六、Es5中的类
 // 1.Es5中的类的定义
        function Person() {
            this.name = '张三';
            this.age = 20;
        }

        var p = new Person();
        console.log(p.name)

//2.构造函数和原型链里面增加的方法
        //构造函数中
        function Student() {
            this.name = '李四';
            this.age = 18;
            this.getInfo = function () {
                console.log(`我的名字是${this.name},我的年龄是${this.age}`)
            }
        }

        //原型链中 (原型链中的属性会被多个实例所共享，构造函数中不会)
        Student.prototype.sex = '男'
        Student.prototype.getSex = function () {
            console.log(`我的性别是${this.sex}`)
        }

//3.静态方法
        Student.getName = function(){
            console.log(`调用静态方法`)
        }

        var s = new Student();
        s.getInfo()
        s.getSex()
        //调用静态方法
        Student.getName()

 //4.Es5中的继承 （对象冒充实现继承）
        function Student() {
            this.name = '李四';
            this.age = 18;
            this.getInfo = function () {//实例方法
                console.log(`我的名字是${this.name},我的年龄是${this.age}`)
            }
        }
        Student.prototype.sex = '男'
        Student.prototype.getSex = function () {
            console.log(`我的性别是${this.sex}`)
        }

        //Web类继承Student类 
        function Web(){
            Student.call(this)//对象冒充实现继承
        }
        var v = new Web();//对象冒充可以继承构造函数里的属性和方法，但是不能继承原型链中的属性和方法
        v.getInfo()
        console.log(v.name)
        // v.getSex()//这里不能调用原型链中的属性和方法
        // console.log(v.sex)

//5.Es5中的继承（原型链实现继承）
        function Student() {
            this.name = '李四';
            this.age = 18;
            this.getInfo = function () {//实例方法
                console.log(`我的名字是${this.name},我的年龄是${this.age}`)
            }
        }
        Student.prototype.sex = '男'
        Student.prototype.getSex = function () {
            console.log(`我的性别是${this.sex}`)
        }

        function Web() {//1.这一步要有

        }
        Web.prototype = new Student()//2.这一步也要有

        var w = new Web();//原型链中即可以继承构造函数里面的属性和方法，也可以继承原型链中的属性和方法
        w.getSex()
        console.log(w.name)
        w.getInfo()

//6.原型链中实现继承的问题？
        function Person(name, age) {
            this.name = name;
            this.age = age;
            this.getInfo = function () {
                console.log(`我的名字是${this.name},我的年龄是${this.age}`)
            }
        }

        Person.prototype.sex = '男';
        Person.prototype.getSex = function () {
            console.lgo(`我的性别是${this.sex}`)
        }
        var p = new Person('李四', 18)
        p.getInfo()

        function Web() {

        }

        Web.prototype = new Person()

        var w = new Web('ww', 20) //问题：原型链中的继承在实例化子类的时候没法给父类传参
        w.getInfo()

//7.原型链+构造函数的组合继承模式（有两种写法）
        function Person(name, age) {
            this.name = name;
            this.age = age;
            this.getInfo = function () {
                console.log(`我的名字是${this.name},我的年龄是${this.age}`)
            }
        }

        Person.prototype.sex = '男';
        Person.prototype.getSex = function () {
            console.log(`我的性别是${this.sex}`)
        }
        var p = new Person('李四', 18)
        p.getInfo()

        function Web(name,age) {
            Person.call(this, name, age) //对象冒充继承实例化子类时，可以给父类传参
        }

        // Web.prototype = new Person() //这样原型链+构造函数的组合继承模式可以修补不足（第一种写法）

        Web.prototype = Person.prototype //原型链+构造函数的组合继承模式的另一种写法

        var w = new Web('ww', 20) //问题：原型链中的继承在实例化子类的时候没法给父类传参
        w.getInfo()
        w.getSex()

七、Ts中的类
// 1.Ts中类的定义
/*
function Person(name){
    this.name = name;
    this.run = function(){
        this.console.log(this.name)
    }
}

var p = new Person("张三")
p.run()
*/

// class Person { //上述Es5中的类的声明实例化过程，在Ts中写法如下
//     name: string;   //属性前面省略了public关键词
//     constructor(name: string) { //构造函数实例化类的时候触发的方法
//         this.name = name;
//     }
//     run(): void {
//         console.log(this.name)
//     }
// }

// var p = new Person("张三")
// p.run()

class Person {
    name: string;
    constructor(name: string) {
        this.name = name;
    }

    getName(): string {
        return this.name;
    }
    setName(name: string): void {
        this.name = name;
    }
}

var p = new Person("李四")
console.log(p.getName())

p.setName("王五")
console.log(p.getName())

//2.Ts中实现继承 extends、super
class Person {
    name: string;
    constructor(name: string) {
        this.name = name;
    }
    run(): string {
        return `${this.name}在运动！`
    }
}
// var p = new Person("张三")
// console.log(p.run())

//继承实现如下
class Web extends Person {
    constructor(name: string) {
        super(name)  //初始化父类的构造函数
    }
    run(): string { //子类中可以重写父类中的方法，当子类调用和父类相同方法名的方法时，调用的是子类中重写后的方法
        return `${this.name}在学习！`
    }
    work(): void { //子类除了可以继承父类的属性和方法之外，还可以定义自己的方法
        console.log(`${this.name}在工作！`)
    }
}

var w = new Web("李四");
console.log(w.run())
w.work();

//3.类里面的修饰符 Ts里面定义属性的时候给我们提供了三种修饰符

/*
public:公有类型           在类里面、子类、类外面都可以访问
protected:保护类型        在类里面、子类里面可以访问，在类外部没法访问
private:私有类型          在类里面可以访问，子类、类外部都没法访问

属性不加修饰符，默认是public
*/

class Person {
    public name: string;
    // protected name: string;  属性在类里面、子类里面可以访问，在类外部没法访问
    // private name: string; 属性在类里面可以访问，子类、类外部都没法访问
    constructor(name: string) {
        this.name = name;
    }
    run(): void {
        console.log(`${this.name}在奔跑~`)
    }
}

class Student extends Person {
    constructor(name: string) {
        super(name)
    }
    study(): void {
        console.log(`${this.name}在学习~`) //子类中
    }
}

var p = new Person("小明")
console.log(p.name) //类内部
p.run() //类外部

var a = new Student("小黑")
a.study()

//4.Ts中的静态方法
class Person {
    public name: string;
    static age = 18;
    constructor(name: string) {
        this.name = name;
    }
    run(): void { //Ts中的实例方法
        console.log(`${this.name}在奔跑~`)
    }
    static ski() { //静态方法的定义 注意：静态方法里只能调用静态属性
        console.log(`在调用静态方法中的静态属性${this.age}`)
    }
}

var p = new Person("王五")
p.run() //调用实例方法，实例对象.方法名
Person.ski()  //调用静态方法，类名.静态方法名
console.log(Person.age)













